Go concurrency in the real world
THE CONF
29 Sep 2017

Vitor De Mario
@vdemario

* The basics

Concurrency is one of the strongest suits of the Go language.

It's based on channels and goroutines.

What are those? How do we use them on a daily basis?

* Channels

Channels are blocking queues.

For those that come from the Java world, think of a `BlockingQueue`.

* Channels basic syntax

	// create
	ch := make(chan int)

	// send
	ch <- 1

	// receive
	i := <-ch

	// close
	close(ch)

	// read from a channel until it's exhausted
	for i := range ch {
		// ...
	}


* Goroutines

A goroutine is the equivalent of a lightweight thread.

An operating system thread is comparatively heavy. It is allocated with a big stack.

Goroutines are allocated with small stacks and may grow dinamically.

Several goroutines run on one OS thread. They are light enough to run thousands in parallel.

* Goroutines basic syntax

	// start a goroutine
	go func()

That's all.

* Goroutines and channels together

	// channels can be passed as parameters
	go func(input chan int, output chan int)

	// channel direction can be defined at the function signature
	go func(input <-chan int, output chan<- int)

* Synchronization

How do you know when a goroutine has finished?

	// channel to signal the end of the goroutine
	done := make(chan struct{})

	go func1() {
		// ...
		done <- struct{}{}
	}()

	go func2() {
		// ...
		done <- struct{}{}
	}()

	<-done
	<-done

This isn't very refined.

* Wait groups

This is better:

	import "sync"

	wg := sync.WaitGroup{}

	wg.Add(1)
	go func1() {
		defer wg.Done()
		// ...
	}()

	wg.Add(1)
	go func2() {
		defer wg.Done()
		// ...
	}()

	wg.Wait()

* Workers

A program can be split into many concurrent tasks easily with channels and goroutines.

Each task may or may not run in parallel, with varying degrees of parallelism.

* Workers

.code theconf/worker.go

* Workers

.image theconf/workers.gif

Credits: Ivan Daniluk
http://divan.github.io/posts/go_concurrency_visualize/

* Everything together

.code theconf/steps.go

* Everything together

.image theconf/workers2.gif

Credits: Ivan Daniluk
http://divan.github.io/posts/go_concurrency_visualize/

* The real world

.code theconf/gnomad_real.go

* Performance

Extremely low memory consumption.

A lot of control over the degree of parallelism of the program. It's very easy to hit 100% CPU.

In the gnomAD program, a *couple*million* mutations could have been processed in the time it took to reach this point in the presentation.

That means the largest database of human mutations ever known could be fully processed in about 36 hours in a single machine.

* Beyond the basics

- Buffers
- Select
- Timeouts

* Buffers

Channels are queues. Queues can have different sizes.

	// buffer - it exists, but don't use them
	ch := make(chan int, 2048)

Buffers store values in memory and make them available immediately to the next read operation.

There might be good uses for them but in my experience they just waste memory.

* Select

Sends and receives on channels are blocking operations.

What if I need to read from N channels at the same time without knowing which one will have data first?

	select {
	case <-ch1:
		// ...
	case <-ch2:
		// ...
	}

* Select

What if I can't block?

Received:

	select {
	case i := <-ch:
		// ...
	default:
		// nothing on the channel
	}

Send:

	select {
	case ch <- i:
		// ...
	default:
		// channel is full
	}

* Timeout

What if I can only block for a while?

	select {
	case i := <-ch:
		// ...
	case <-time.After(2 * time.Second):
		// timeout
	}

I'll get data in 2 seconds or abort.
