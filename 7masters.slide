Concorrência na prática
7 Masters Go
05 Apr 2017

Vitor De Mario
@vdemario

* Básico

Concorrência é um dos pontos fortes da linguagem Go.

É baseada em channels e goroutines.

Como se usam essas features no dia a dia?

* Sintaxe básica

	// criar
	ch := make(chan int)

	// enviar
	ch <- 1

	// receber
	i := <-ch

	// fechar
	close(ch)

	// loop até fechar
	for i := range ch {
		...
	}

	// disparar goroutine
	go func()

	// assinatura de função definindo direção do channel
	func a(input <-chan int, output chan<- int)

* Select

Sends e receives em canais são operações bloqueantes.

E se eu preciso ler de N channels ao mesmo tempo e não sei quem vem primeiro?

	select {
	case <-ch1:
		...
	case <-ch2:
		...
	}

* Select

E se eu não puder bloquear?

	select {
	case <-ch:
		...
	default:
		// não recebi dado
	}

* Timeout

	select {
	case i := <-ch:
		...
	case <-time.After(2 * time.Second):
		// timeout
	}

Ou recebo um dado em 2 segundos ou aborto.

* Sincronização

Quando várias goroutines rodam ao mesmo tempo:

	// channel pra indicar fim do trabalho da goroutine
	done := make(chan struct{})

	go func1(done chan<- struct{}) {
		...
		done <- struct{}
	}

	go func2(done chan<- struct{}) {
		...
		done <- struct{}
	}

	<-done
	<-done

* Wait groups

Melhor:

	import "sync"

	wg := sync.WaitGroup{}

	wg.Add(1)
	go func1(wg *sync.WaitGroup) {
		defer wg.Done()
		...
	}(&wg)

	wg.Add(1)
	go func2(wg *sync.WaitGroup) {
		defer wg.Done()
		...
	}(&wg)

	wg.Wait()

* Cancelamento com context

Contexts incluem um channel que pode ser usado para interromper um trabalho longo:

	select {
	case <-ctx.Done():
		return ctx.Err()
	default:
		// inicia trabalho pesado
	}

Contexts podem ser usados com cancelamento, com deadlines, com timeouts.

São usados dentro da stdlib pelos pacotes net/http e database/sql.

* Workers

Channels e goroutines facilitam a subdivisão de um programa em tarefas concorrentes.

Cada "tarefa" pode ser paralelizada ou não, com diferentes graus de paralelismo.

O trabalho pode ser interrompido usando contexts.

* Workers

.code 7masters/worker.go

* Workers com cancelamento por context

.code 7masters/workerctx.go

* Juntando tudo

.code 7masters/steps.go

* Juntando tudo

Cada func controla sua própria concorrência criando seu próprio WaitGroup e passando ele para as goroutines que essa func cria.

Cada func recebe um WaitGroup como parâmetro criado pelo seu parent.

Alternativamente, pode existir um único WaitGroup para o programa inteiro.

Cancelamento é controlado por um context criado no top level do programa.

* Realidade

.code 7masters/gnomad_real.go
